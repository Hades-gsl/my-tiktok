// Code generated by Kitex v0.6.2. DO NOT EDIT.

package chatservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	chat "tiktok/kitex_gen/chat"
)

func serviceInfo() *kitex.ServiceInfo {
	return chatServiceServiceInfo
}

var chatServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChatService"
	handlerType := (*chat.ChatService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ChatMessage": kitex.NewMethodInfo(chatMessageHandler, newChatServiceChatMessageArgs, newChatServiceChatMessageResult, false),
		"Send":        kitex.NewMethodInfo(sendHandler, newChatServiceSendArgs, newChatServiceSendResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func chatMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceChatMessageArgs)
	realResult := result.(*chat.ChatServiceChatMessageResult)
	success, err := handler.(chat.ChatService).ChatMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceChatMessageArgs() interface{} {
	return chat.NewChatServiceChatMessageArgs()
}

func newChatServiceChatMessageResult() interface{} {
	return chat.NewChatServiceChatMessageResult()
}

func sendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceSendArgs)
	realResult := result.(*chat.ChatServiceSendResult)
	success, err := handler.(chat.ChatService).Send(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceSendArgs() interface{} {
	return chat.NewChatServiceSendArgs()
}

func newChatServiceSendResult() interface{} {
	return chat.NewChatServiceSendResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ChatMessage(ctx context.Context, req *chat.MessageRequest) (r *chat.MessageResponse, err error) {
	var _args chat.ChatServiceChatMessageArgs
	_args.Req = req
	var _result chat.ChatServiceChatMessageResult
	if err = p.c.Call(ctx, "ChatMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Send(ctx context.Context, req *chat.SendRequest) (r *chat.SendResponse, err error) {
	var _args chat.ChatServiceSendArgs
	_args.Req = req
	var _result chat.ChatServiceSendResult
	if err = p.c.Call(ctx, "Send", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
