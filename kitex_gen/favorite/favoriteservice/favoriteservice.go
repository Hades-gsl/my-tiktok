// Code generated by Kitex v0.6.2. DO NOT EDIT.

package favoriteservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	favorite "tiktok/kitex_gen/favorite"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Action": kitex.NewMethodInfo(actionHandler, newFavoriteServiceActionArgs, newFavoriteServiceActionResult, false),
		"List":   kitex.NewMethodInfo(listHandler, newFavoriteServiceListArgs, newFavoriteServiceListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceActionArgs)
	realResult := result.(*favorite.FavoriteServiceActionResult)
	success, err := handler.(favorite.FavoriteService).Action(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceActionArgs() interface{} {
	return favorite.NewFavoriteServiceActionArgs()
}

func newFavoriteServiceActionResult() interface{} {
	return favorite.NewFavoriteServiceActionResult()
}

func listHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceListArgs)
	realResult := result.(*favorite.FavoriteServiceListResult)
	success, err := handler.(favorite.FavoriteService).List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceListArgs() interface{} {
	return favorite.NewFavoriteServiceListArgs()
}

func newFavoriteServiceListResult() interface{} {
	return favorite.NewFavoriteServiceListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Action(ctx context.Context, req *favorite.ActionRequest) (r *favorite.ActionResponse, err error) {
	var _args favorite.FavoriteServiceActionArgs
	_args.Req = req
	var _result favorite.FavoriteServiceActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) List(ctx context.Context, req *favorite.ListRequest) (r *favorite.ListResponse, err error) {
	var _args favorite.FavoriteServiceListArgs
	_args.Req = req
	var _result favorite.FavoriteServiceListResult
	if err = p.c.Call(ctx, "List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
