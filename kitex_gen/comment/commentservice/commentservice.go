// Code generated by Kitex v0.6.2. DO NOT EDIT.

package commentservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	comment "tiktok/kitex_gen/comment"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Action": kitex.NewMethodInfo(actionHandler, newCommentServiceActionArgs, newCommentServiceActionResult, false),
		"List":   kitex.NewMethodInfo(listHandler, newCommentServiceListArgs, newCommentServiceListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceActionArgs)
	realResult := result.(*comment.CommentServiceActionResult)
	success, err := handler.(comment.CommentService).Action(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceActionArgs() interface{} {
	return comment.NewCommentServiceActionArgs()
}

func newCommentServiceActionResult() interface{} {
	return comment.NewCommentServiceActionResult()
}

func listHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceListArgs)
	realResult := result.(*comment.CommentServiceListResult)
	success, err := handler.(comment.CommentService).List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceListArgs() interface{} {
	return comment.NewCommentServiceListArgs()
}

func newCommentServiceListResult() interface{} {
	return comment.NewCommentServiceListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Action(ctx context.Context, req *comment.ActionRequest) (r *comment.ActionResponse, err error) {
	var _args comment.CommentServiceActionArgs
	_args.Req = req
	var _result comment.CommentServiceActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) List(ctx context.Context, req *comment.ListRequest) (r *comment.ListResponse, err error) {
	var _args comment.CommentServiceListArgs
	_args.Req = req
	var _result comment.CommentServiceListResult
	if err = p.c.Call(ctx, "List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
